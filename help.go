package main

// generated by docsgen.py

func showHelp(cmd string) {
	s := ""
	if len(cmd) >= 6 {
		s = cmd[5 : len(cmd)-1]
	}
	switch s {
	default:
		globals.outputColor.Println(`No help exists for "` + s + `".`)
	case "":
		globals.outputColor.Println(`Use "help xxx" to see help for a particular subject.
Or read the Language Specification: gitlab.com/QazmoQwerty/trex/-/blob/master/docs/trex-spec.md`)
	case "example":
		globals.outputColor.Println(`Use "example xxx" to an example of a particular subject.`)
	case "help":
		globals.outputColor.Println(`Use "help xxx" to see help for a particular subject.`)
	case "exit":
		globals.outputColor.Println(`
"exit":
Exits the interpreter. Identical to "quit".
Input: none
Parameters: none
`)
	case "quit":
		globals.outputColor.Println(`
"quit":
Exits the interpreter. Identical to "exit".
Input: a list
Parameters: none
`)
	case "ascii":
		globals.outputColor.Println(`
"ascii":
Returns a list of numbers, with every number representing the ASCII value of the corresponding character in the string.
Input: a string
Parameters: none
Tip: try "example ascii" to see an example.
`)
	case "bool":
		globals.outputColor.Println(`
"bool":
Returns 'true' if the input is true, otherwise 'false
Input: a string
Parameters: none
Tip: try "example bool" to see an example.
`)
	case "chars":
		globals.outputColor.Println(`
"chars":
Splits a given string into a list of single characters.
Input: a string.
Parameters: none
Tip: try "example chars" to see an example.
`)
	case "count":
		globals.outputColor.Println(`
"count":
Returns the number of values in a given list.
Input: a list.
Parameters: none
Tip: try "example count" to see an example.
`)
	case "endswith":
		globals.outputColor.Println(`
"endswith":
Checks whether a given string ends with a specified suffix.
Input: a string.
Parameters: 1
* The suffix
Tip: try "example endswith" to see an example.
`)
	case "fold":
		globals.outputColor.Println(`
"fold":
Applies a right fold to a list. Equivalent to 'foldr'.
Input: a list
Parameters: 1
* The definition by which to fold fold the values
Tip: try "example fold" to see an example.
`)
	case "foldl":
		globals.outputColor.Println(`
"foldl":
Applies a left fold to a list.
Input: a list
Parameters: 1
* The definition by which to fold fold the values
Tip: try "example foldl" to see an example.
`)
	case "foldr":
		globals.outputColor.Println(`
"foldr":
Applies a right fold to a list.
Input: a list
Parameters: 1
* The definition by which to fold fold the values
Tip: try "example foldr" to see an example.
`)
	case "hasmatch":
		globals.outputColor.Println(`
"hasmatch":
Finds whether a regular expression has a match whithin a string.
Input: a string
Parameters: 1
* The regular expression to match 
Tip: try "example hasmatch" to see an example.
`)
	case "indexby":
		globals.outputColor.Println(`
"indexby":
Finds the index of the first character which satisfies the definition. Returns -1 if no character satisfies the definition.
Input: a string.
Parameters: 1
* The definition
Tip: try "example indexby" to see an example.
`)
	case "indexof":
		globals.outputColor.Println(`
"indexof":
Finds the index of the first instance of a substring. Returns -1 if the substring is not found.
Input: a string.
Parameters: 1
* The substring to find
Tip: try "example indexof" to see an example.
`)
	case "isalnum":
		globals.outputColor.Println(`
"isalnum":
Checks whether if all characters in a string are alphanumeric and there is at least one character.
Input: a string.
Parameters: none
Tip: try "example isalnum" to see an example.
`)
	case "isalpha":
		globals.outputColor.Println(`
"isalpha":
Checks if all characters in a string are alphabetic and there is at least one character.
Input: a string.
Parameters: none
Tip: try "example isalpha" to see an example.
`)
	case "isdigit":
		globals.outputColor.Println(`
"isdigit":
Checks if a string is a single digit.
Input: a string
Parameters: none
Tip: try "example isdigit" to see an example.
`)
	case "isletter":
		globals.outputColor.Println(`
"isletter":
Checks if a string is a single letter.
Input: a string
Parameters: none
Tip: try "example isletter" to see an example.
`)
	case "islower":
		globals.outputColor.Println(`
"islower":
Checks if a string is comprised only of lowercase letters.
Input: a string
Parameters: none
Tip: try "example islower" to see an example.
`)
	case "isnum":
		globals.outputColor.Println(`
"isnum":
Checks if all characters in a string are numeric and there is at least one character.
Input: a string.
Parameters: none
Tip: try "example isnum" to see an example.
`)
	case "isspace":
		globals.outputColor.Println(`
"isspace":
Checks if there are only whitespace characters in the string and there is at least one character
Input: a string.
Parameters: none
Tip: try "example isspace" to see an example.
`)
	case "istitle":
		globals.outputColor.Println(`
"istitle":
Checks if all words in a string begin with an uppercase letter and are otherwise are lowercase.
Input: a string.
Parameters: none
Tip: try "example istitle" to see an example.
`)
	case "isupper":
		globals.outputColor.Println(`
"isupper":
Checks if a string is comprised only of uppercase letters.
Input: a string
Parameters: none
Tip: try "example isupper" to see an example.
`)
	case "join":
		globals.outputColor.Println(`
"join":
Joins all elements in a list into a single string.
Input: a list
Parameters: none
Tip: try "example join" to see an example.
`)
	case "lastindexby":
		globals.outputColor.Println(`
"lastindexby":
Finds the index of the last character which satisfies the definition. Returns -1 if no character satisfies the definition.
Input: a string.
Parameters: 1
* The definition
Tip: try "example lastindexby" to see an example.
`)
	case "lastindexof":
		globals.outputColor.Println(`
"lastindexof":
Finds the index of the last instance of a substring. Returns -1 if the substring is not found.
Input: a string.
Parameters: 1
* The substring to find
Tip: try "example lastindexof" to see an example.
`)
	case "len":
		globals.outputColor.Println(`
"len":
Returns the length of a given string.
Input: a string.
Parameters: none
Tip: try "example len" to see an example.
`)
	case "lines":
		globals.outputColor.Println(`
"lines":
Splits a given string into lines.
Input: a string.
Parameters: none
Tip: try "example lines" to see an example.
`)
	case "matches":
		globals.outputColor.Println(`
"matches":
Finds all matches of a regular expression whithin a string.
Input: a string
Parameters: 1
* The regular expression to match 
Tip: try "example matches" to see an example.
`)
	case "max":
		globals.outputColor.Println(`
"max":
Finds the largest value in a list based on a specified order.
Input: a list.
Parameters: 1
* the definition by which to order the values, which must return a value 
Tip: try "example max" to see an example.
`)
	case "min":
		globals.outputColor.Println(`
"min":
Finds the smallest value in a list based on a specified order.
Input: a list.
Parameters: 1
* the definition by which to order the values, which must return a value 
Tip: try "example min" to see an example.
`)
	case "numoccurs":
		globals.outputColor.Println(`
"numoccurs":
Returns the number of times a value occurs inside a given list or string.
Input: a list or string.
Parameters: 1
* the value to count occurences of
Tip: try "example numoccurs" to see an example.
`)
	case "replace":
		globals.outputColor.Println(`
"replace":
Replaces all occurences of a certain string whithin a string with another string.
Input: a string
Parameters:
* the string to search for 
* the string to replace with
Tip: try "example replace" to see an example.
`)
	case "reverse":
		globals.outputColor.Println(`
"reverse":
Reverses a string or list.
Input: a string or list
Parameters: none
Tip: try "example reverse" to see an example.
`)
	case "sort":
		globals.outputColor.Println(`
"sort":
Sorts a list (ascending) based on a specified order.
Input: a list.
Parameters: 1
* the definition by which to order the values, which must return a value convertible to a number.
Tip: try "example sort" to see an example.
`)
	case "split":
		globals.outputColor.Println(`
"split":
Splits a string into a list based on a seperator.
Input: a string.
Expected number of parameters: 1
* The seperator string
Tip: try "example split" to see an example.
`)
	case "startswith":
		globals.outputColor.Println(`
"startswith":
Checks whether a given string starts with a specified prefix.
Input: a string.
Parameters: 1
* The prefix
Tip: try "example startswith" to see an example.
`)
	case "swapcase":
		globals.outputColor.Println(`
"swapcase":
Swaps uppercase letters with their lowercase counterparts and vice versa. 
Input: a string
Parameters: none
Tip: try "example swapcase" to see an example.
`)
	case "tolower":
		globals.outputColor.Println(`
"tolower":
Returns the input with all unicode letters mapped to their lower case.
Input: a string.
Parameters: none
Tip: try "example tolower" to see an example.
`)
	case "totitle":
		globals.outputColor.Println(`
"totitle":
Converts the letters at the beginning of each word to uppercase.
Input: a string
Parameters: none
Tip: try "example totitle" to see an example.
`)
	case "toupper":
		globals.outputColor.Println(`
"toupper":
Returns the input with all unicode letters mapped to their upper case.
Input: a string.
Parameters: none
Tip: try "example toupper" to see an example.
`)
	case "unique":
		globals.outputColor.Println(`
"unique":
Returns a list of all unique values in a given list.
Input: a list.
Parameters: none
Tip: try "example unique" to see an example.
`)
	case "words":
		globals.outputColor.Println(`
"words":
Splits a given string into words.
Input: a string.
Parameters: none
Tip: try "example words" to see an example.
`)
	}
}

func showExample(cmd string) {
	s := ""
	if len(cmd) >= 9 {
		s = cmd[8 : len(cmd)-1]
	}
	switch s {
	default:
		globals.outputColor.Println(`No example exists for "` + s + `".`)
	case "":
		globals.outputColor.Println(`Try "example xxx" to see an example for a particular subject.`)
	case "example":
		globals.outputColor.Println(`
--> example example
[Do you really need to see this?]
`)
	case "help":
		globals.outputColor.Println(`
--> help example
[help for for how to use the example command]
`)
	case "quit":
		globals.outputColor.Println(`
--> quit
[trex will exit]
`)
	case "exit":
		globals.outputColor.Println(`
--> exit
[trex will exit]
`)
	case "ascii":
		globals.outputColor.Println(`
--> ascii 0123
48, 49, 50, 51
`)
	case "bool":
		globals.outputColor.Println(`
--> bool (1 = 2)
false
--> bool (12 > 4)
true
`)
	case "chars":
		globals.outputColor.Println(`
--> chars 12343
1, 2, 3, 4, 3
`)
	case "count":
		globals.outputColor.Println(`
--> lines
one, two, three
--> count lines
3
`)
	case "endswith":
		globals.outputColor.Println(`
--> bool endswith('ab') 'kabab'
true
`)
	case "fold":
		globals.outputColor.Println(`
--> fold(a,b -> a+b) (1, 2, 3, 4, 5)
15
`)
	case "foldl":
		globals.outputColor.Println(`
--> fold(a,b -> a+b) (1, 2, 3, 4, 5)
15
`)
	case "foldr":
		globals.outputColor.Println(`
--> fold(a,b -> a+b) (1, 2, 3, 4, 5)
15
`)
	case "hasmatch":
		globals.outputColor.Println(`
--> bool hasmatch('a[a-z]') "abbbjaja"
true
`)
	case "indexby":
		globals.outputColor.Println(`
--> indexby(->[] = 'a' or [] = 'b') "this is a string"
8
`)
	case "indexof":
		globals.outputColor.Println(`
--> indexof("s") "this is a string"
3
`)
	case "isalnum":
		globals.outputColor.Println(`
--> bool isalnum 'abc12'
true
--> bool isalnum 'ab$$1'
false
`)
	case "isalpha":
		globals.outputColor.Println(`
--> bool isalpha 'abc12'
true
--> bool isalpha 'ab$$1'
false
`)
	case "isdigit":
		globals.outputColor.Println(`
--> bool isdigit 1
true
--> bool isdigit 'a'
false
--> bool isdigit 12
false
`)
	case "isletter":
		globals.outputColor.Println(`
--> bool isletter 1
false
--> bool isletter 'a'
true
--> bool isletter 'aa'
false
`)
	case "islower":
		globals.outputColor.Println(`
--> bool islower 'A'
false
--> bool islower 'aa'
true
`)
	case "isnum":
		globals.outputColor.Println(`
--> bool isnum 13
true
--> bool isnum 'ab'
false
`)
	case "isspace":
		globals.outputColor.Println(`
--> bool isspace '  '
true
`)
	case "istitle":
		globals.outputColor.Println(`
--> bool istitle 'Her Royal Highness'
true
`)
	case "isupper":
		globals.outputColor.Println(`
--> bool isupper 'a'
false
--> bool isupper 'AA'
true
`)
	case "join":
		globals.outputColor.Println(`
--> join (1, 2, 3, 4, 5)
12345
`)
	case "lastindexby":
		globals.outputColor.Println(`
--> lastindexby(->[] = 'a' or [] = 'b') "kabab"
4
`)
	case "lastindexof":
		globals.outputColor.Println(`
--> lastindexof("s") "this is a string"
10
`)
	case "len":
		globals.outputColor.Println(`
--> len "example"
7
`)
	case "lines":
		globals.outputColor.Println(`
--> []
one
two
three
--> lines
one, two, three
`)
	case "matches":
		globals.outputColor.Println(`
--> matches('a[a-z]') "abbbjaja"
ab, aj
`)
	case "max":
		globals.outputColor.Println(`
--> []
word
another
foo
--> max(#len)
another
`)
	case "min":
		globals.outputColor.Println(`
--> []
word
another
foo
--> min(#len)
foo
`)
	case "numoccurs":
		globals.outputColor.Println(`
--> numoccurs('fo') 'foobafo'
2
`)
	case "replace":
		globals.outputColor.Println(`
--> replace('a', 'AA') 'a bar'
AA bAAr
`)
	case "reverse":
		globals.outputColor.Println(`
--> reverse (1, 2, 3, 4)
4, 3, 2, 1
--> reverse 1234
4321
`)
	case "sort":
		globals.outputColor.Println(`
--> words
one, three, four
--> sort(#len) words
one, four, three
`)
	case "split":
		globals.outputColor.Println(`
--> split(' ') "12 13 14 15"
12, 13, 14, 15
`)
	case "startswith":
		globals.outputColor.Println(`
--> bool startswith('tr') 'trex'
true
`)
	case "swapcase":
		globals.outputColor.Println(`
--> swapcase "Her Royal Highness"
hER rOYAL hIGHNESS
`)
	case "tolower":
		globals.outputColor.Println(`
--> tolower "Hello World"
hello world
`)
	case "totitle":
		globals.outputColor.Println(`
--> totitle "her royal highness"
Her Royal Highness
`)
	case "toupper":
		globals.outputColor.Println(`
--> toupper "Hello World"
HELLO WORLD
`)
	case "unique":
		globals.outputColor.Println(`
--> foo => 1, 2, 3, 4, 4, 3, 2, 1, 3, 7
--> unique foo
1, 2, 3, 4, 7
`)
	case "words":
		globals.outputColor.Println(`
--> foo => "this is a sentence"
--> words foo
this, is, a, sentence
`)
	}
}
